DTree树形浏览文件 
MiniBufExplorer多文件同时编辑 
Winmanager将NERDTree和MiniBufExplorer界面整合

下载 
http://www.vim.org/scripts/script.php?script_id=1658 
http://www.vim.org/scripts/script.php?script_id=159 
http://www.vim.org/scripts/script.php?script_id=95

安装 
NERDTree和Winmanager解压到.vim 
MiniBufExplorer拷贝到.vim/plugin

修改.vimrc

"设置鼠标定位
set mouse=a

"set cursorcolumn
set cursorline
set hls
syntax on
set smartindent  "自动缩进
set nu
set incsearch  " 逐字符高亮
set cindent   
set expandtab
set tabstop=4
set shiftwidth=4 "设置自动缩进长度为4格
set autoindent 
set showmatch "显示括号匹配 




let g:miniBufExplMapWindowNavVim = 1   
let g:miniBufExplMapWindowNavArrows = 1   
let g:miniBufExplMapCTabSwitchBufs = 1   
let g:miniBufExplModSelTarget = 1  
let g:miniBufExplMoreThanOne=0  

let g:NERDTree_title="[NERDTree]"  
let g:winManagerWindowLayout="NERDTree|TagList"  

function! NERDTree_Start()  
    exec 'NERDTree'  
endfunction  

function! NERDTree_IsValid()  
    return 1  
endfunction  

nmap wm :WMToggle<CR>  




优化 
Winmanager使用时会打开一个空的文件

# .vim/plugin/winmanager.vim


function! <SID>ToggleWindowsManager()  
   if IsWinManagerVisible()  
      call s:CloseWindowsManager()  
   else  
      call s:StartWindowsManager()  
      exe 'q'   //添加
   end  
endfunction



使用w^m组合键打开WMToggle







ctags -R

cscope -Rbq


vim 中
cs a cscope.out  #加载符号索引文件


cs find c|d|e|f|g|i|s|t name

0 或 s	查找本 C 符号(可以跳过注释)
1 或 g	查找本定义
2 或 d	查找本函数调用的函数
3 或 c	查找调用本函数的函数
4 或 t	查找本字符串
6 或 e	查找本 egrep 模式
7 或 f	查找本文件
8 或 i	查找包含本文件的文件



当然如果每次输入这么长的命令肯定有人受不了， Cscope的帮助手册中推荐了一些快捷键的用法, 下面是其中一组,虽然我个人暂时没用，但还是贴出来，将下面的内容添加到~/.vimrc中, 并重启vim:

nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
nmap <C-_>i :cs find i ^<C-R>=expand("<cfile>")<CR>$<CR>
nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

当光标停在某个你要查找的词上时, 按下<C-_>g, 就是查找该对象的定义, 其他的同理.按这种组合键有一点技巧,按了<C-_>后要马上按下一个键,否则屏幕一闪就回到nomal状态了<C-_>g的按法是按"Ctrl+Shift+-", 然后很快再按"g"



在vimrc中配置好了快捷键
nmap <C-\>g :cs find g <C-R>=expand("<cword>")<CR><CR>
VIM中操作时，按下 CTRL+\+g 就是没作用。之前遇到过也解决了但是没记录，这次又尝试好半天，原来是先按ctrl不放，按\键，同时放开，快速按g键！

嗯，以后我想我记住了这个常识。






1. 首先需要已安装ctags

2. 下载tagbar插件：https://vim.sourceforge.io/scripts/script.php?script_id=3465

3. 放置位置：~/.vim/plugin

vim tagbar.vmb

:so %



nmap <silent> <F4> :TagbarToggle<CR>  
let g:tagbar_ctags_bin = 'ctags'  
let g:tagbar_width = 60  



生成ctags 后  "ctags -R",     ctrl+] 跳转函数定义，  ctrl+t  ， ctrl + o 返回
ctrl+鼠标右键--跳转函数定义，  ctrl +鼠标左键--返回


用vim时，想高亮显示一个单词并查找的方发，将光标移动到所找单词.
1: shift + "*"  向下查找并高亮显示
2: shift + "#"  向上查找并高亮显示
3: "g" + "d"    高亮显示光标所属单词，"n" 查找！


vim如何显示多个高亮?
对于简单的高亮，可以使用 :match 和 :hi[light] 命令。如果你打开 hlsearch
选项，那么搜索本身可以提供一种高亮。运行 :hi
命令，在显示的列表中选择另外一个（或多个）高亮名称，记住它们。如下图，我选择了
ErrorMsg 和 WildMenu 两个

:match ErrorMsg /evil/
:2match WildMenu /VIM/



